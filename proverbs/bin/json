#!/usr/bin/env ruby

require 'json'
require 'nokogiri'

class Record
  ATTRIBUTES = %i(expression equivalent translation meaning)

  attr_accessor *ATTRIBUTES

  def self.parse(element)
    attribute = element.css('i')[0]
    return nil if attribute.nil?
    record = Record.new
    record.expression = attribute.text
    element.css('li').each do |attribute|
      text = attribute.text
      case text
      when /^Translation and English equivalent: (.*)$/i, /^English equivalent: (.*)$/i
        record.equivalent = compact(record.equivalent, typograph($1))
      when /^Translation: (.*)$/i
        record.translation = compact(record.translation, typograph($1))
      when /^Meaning: "(.*)"\.$/i, /^Meaning: "(.*)"$/i, /^Meaning: (.*)$/i
        record.meaning = compact(record.meaning, typograph($1))
      end
    end
    record
  end

  def to_json(options = {})
    as_json.to_json(options)
  end

  def as_json(options = {})
    object = {}
    ATTRIBUTES.each do |attribute|
      value = self.send(attribute)
      object[attribute] = value unless value.nil?
    end
    value = object.delete(:equivalent)
    object[:translation] = value unless value.nil?
    object
  end
end

def compact(*sentences)
  sentences.compact[0]
end

def typograph(text)
  text.gsub!(/ '/, ' ‘')
  text.gsub!(/^'/, '‘')
  text.gsub!(/'/, '’')
  text.gsub!(/ — /, '—')
  text.gsub!(/ – /, '—')
  text
end

raise 'an HTML file is required' if ARGV.length < 1

page = Nokogiri::HTML(open(ARGV[0]))
elements = page.css('#mw-content-text')[0].children

database = []
elements.each do |element|
  next unless element.node_name == 'ul'
  record = Record.parse(element)
  next if record.nil?
  database << record
end

puts JSON.pretty_generate(database)
